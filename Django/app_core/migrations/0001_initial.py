# Generated by Django 4.2.3 on 2025-01-21 19:48

import app_core.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='LEVEL_RULE',
            fields=[
                ('level', models.IntegerField(help_text='레벨', primary_key=True, serialize=False)),
                ('text_color', models.CharField(help_text='레벨 텍스트 색상', max_length=20)),
                ('background_color', models.CharField(help_text='레벨 배경 색상', max_length=20)),
                ('name', models.CharField(help_text='레벨 이름', max_length=20)),
                ('required_point', models.IntegerField(help_text='필요 포인트(한번 레벨업이 되면, 이 값이 수정되어도 레벨이 다시 내려가지는 않음.)')),
            ],
        ),
        migrations.CreateModel(
            name='SERVER_SETTING',
            fields=[
                ('id', models.CharField(help_text='설정 이름', max_length=100, primary_key=True, serialize=False)),
                ('value', models.TextField(help_text='설정 값')),
            ],
        ),
        migrations.CreateModel(
            name='UPLOAD',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=app_core.models.upload_to)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account_type', models.CharField(help_text='계정 유형(user, dame, partner, supervisor, sub_supervisor, admin)', max_length=20)),
                ('status', models.CharField(help_text='계정 상태(active, pending, sleeping, deleted, blocked, banned)', max_length=20)),
                ('note', models.TextField(blank=True, help_text='관리자 메모(없으면 공백)', null=True)),
                ('user_usable_point', models.IntegerField(help_text='사용 가능한 포인트')),
                ('user_level_point', models.IntegerField(help_text='레벨업 포인트')),
                ('user_level', models.IntegerField(help_text='사용자 레벨')),
                ('user_bookmarks', models.TextField(blank=True, help_text='북마크한 게시물 ID(없으면 공백. ,로 구분)', null=True)),
                ('partner_tel', models.CharField(blank=True, help_text='파트너 연락처(없으면 공백)', max_length=20, null=True)),
                ('partner_address', models.CharField(blank=True, help_text='파트너 주소(없으면 공백)', max_length=200, null=True)),
                ('partner_categories', models.CharField(blank=True, help_text='파트너 업종 카테고리(없으면 공백)', max_length=200, null=True)),
                ('supervisor_permissions', models.CharField(blank=True, help_text='관리자 권한(없으면 공백. ,로 구분. user(사용자 관리), partner(파트너 관리), supervisor(관리자 관리), post(게시물 관리), coupon(쿠폰 관리), message(메시지 관리), setting(설정 관리))', max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
